// =================================
// Color palette generator
// =================================

// Declare allowed types
// Currently limited to the types below
$allowed-types: (analogous, monochromatic, triad, complementary);

// Defaults
$default-palette-type:      monochromatic !default;
$default-base-factor:       5% !default;
$default-number-of-colors:  10 !default;
$default-darken:            false !default;
$default-start-index:       0 !default;
$default-color-offset:      false !default;

// Declare default values in mixin parameters
@function generate-color-palette($base-color,
$type:              $default-palette-type,
$base-factor:       $default-base-factor,
$number-of-colors:  $default-number-of-colors,
$darken:            $default-darken,
$start-index:       $default-start-index,
$color-offset:      $default-color-offset) {

  // Mixin begins here

  @if not $base-color {
    @error "Base color is required";
  }

  // Check for invalid type early
  @if not index($allowed-types, $type) {
    @error "Invalid type: #{$type}";
  }

  // restrict Triad to 3 colours
  @if triad == $type and $number-of-colors > 3 {
    $number-of-colors: 3;
    $color-offset: 120deg;
  } @else if monochromatic == $type {
    // Set color offset to 0 for monochromatic
    // Only lightness changes
    $color-offset: 0deg;
  }

  @if not $color-offset {
    @if analogous == $type {
      $color-offset: 36deg;
    } @else if complementary == $type {
      // Cross-complement by default
      $color-offset: 90deg;
    }
  }

  // Set color limit to 4 for cross-complement
  @if complementary == $type {
    $number-of-colors: 4;
  }

  // Set the current to the base color by default
  $current-color: $base-color;

  $factor-increment: 0;

  $end-index: $start-index + $number-of-colors - 1;

  $previous-color: null;

  $map: ();

  // Loop begins
  @for $i from $start-index through $end-index {

    $factor: $factor-increment * $base-factor;

    // Get HSL from base color
    $color-hue: hue($current-color);
    $color-saturation: saturation($current-color);
    $color-lightness: lightness($current-color);

    $current-color: hsl($color-hue, $color-saturation, $color-lightness);
    $current-map: ();

    $method: lighten;

    @if $darken {
      $method: darken;
    }

    // Do color manipulation, skip first (base) color, cos we want that to stay the same
    @if $i > $start-index {

      @if complementary == $type {
        // Get cross-complement
        @if $i == 2 {
          // For index 2, rotate color by offset (default 90deg)
          $current-color: adjust-hue($current-color, $color-offset);
          //          //@debug $current-color;
        } @else {
          // on 1 and 3 get complement
          $current-color: complement($current-color);
        }
      } @else {
        // Run given method on color
        $current-color: call($method, adjust-hue($current-color, $color-offset), $factor);
      }

      // increment colour offset for analogous color
      @if analogous == $type {
        $colour-offset: $color-offset + $color-offset;
      }

      // If totally white, let's bring it back into color
      @if lightness($current-color) == 100% {
        $current-color: darken($current-color, $factor);
      }

    }

    $index: $i + 1;
    $contrast: contrast-color($current-color);

    $factor-increment: $factor-increment + 1;

    // Store the current set of colours in a map
    // add this current map to the maps list
    $current-map: ($i: $current-color);
    $map: map-merge($map, $current-map);
  }

  @return $map;
}

// Functions

// Contrast color override (for CodePen)
$contrasted-dark-default: #000 !default;
$contrasted-light-default: #fff !default;

// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function brightness($color) {
  @if type-of($color) == color {
    @return (red($color) * 0.299 + green($color) * 0.587 + blue($color) * 0.114) / 255 * 100%;
  }
  @else {
    @return unquote("brightness(#{$color})");
  }
}

@function contrast-color($color, $dark: $contrasted-dark-default, $light: $contrasted-light-default) {
  @if $color == null {
    @return null;
  } @else {
    $color-brightness: brightness($color);
    $dark-text-brightness: brightness($dark);
    $light-text-brightness: brightness($light);

    // Fix CodePen :p

    $light-diff: strip-unit($color-brightness) - strip-unit($light-text-brightness);
    $dark-diff: strip-unit($color-brightness) - strip-unit($dark-text-brightness);

    @return if(abs($light-diff) > abs($dark-diff), $light, $dark);
  }
}

// Get a single specific color in a map
@function get-palette-color($palette: $viz-palette, $n: 0) {
  @return map-get($palette, $n);
}
