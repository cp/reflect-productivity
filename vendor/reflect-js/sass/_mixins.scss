@mixin viz-line-color($color, $hover, $opacity: 1.0) {
  &.viz-line-path {
    transition: all $viz-tranisition-time linear;

    stroke: $color;
    stroke-opacity: alpha($color);

    &:hover, &.viz-active {
      stroke: $hover;
      stroke-opacity: alpha($hover);
    }
  }
}

@mixin viz-area-color($color, $hover) {
  &.viz-area-path {
    transition: all $viz-tranisition-time linear;
    fill: $color;
    stroke: $color;
    stroke-opacity: alpha($color);

    &:hover, &.viz-active {
      fill: $hover;
      stroke: $hover;
      stroke-opacity: alpha($hover);
    }
  }
}

@mixin viz-bar-color($color, $hover) {
  .viz-bar-rect {
    transition: all $viz-tranisition-time linear;

    fill: $color;
    stroke: $color;
    stroke-opacity: alpha($color);

    &:hover {
      fill: $hover;
      stroke: $hover;
      stroke-opacity: alpha($hover);
    }

    &.viz-single-series {
      fill: $color;
      stroke: $color;
      stroke-opacity: alpha($color);

      &.viz-opened {
        fill: $hover;
        stroke: $hover;
        stroke-opacity: alpha($hover);
      }
    }
  }

  // NOTE: This is defined because the entire series gets selected by the
  // external part.
  &.viz-active {
    .viz-bar-rect {
      fill: $hover;
      stroke: $hover;
      stroke-opacity: alpha($hover);
    }

    .viz-single-series {
      .viz-bar-rect {
        fill: $color;
        stroke: $color;
        stroke-opacity: alpha($color);

        &.viz-opened {
          fill: $hover;
          stroke: $hover;
          stroke-opacity: alpha($hover);
        }
      }
    }
  }
}

@mixin viz-pie-color($color, $hover) {
  &.viz-pie-arc {
    transition: fill $viz-tranisition-time linear;

    fill: $color;
    stroke: $color;
    stroke-opacity: alpha($color);

    &:hover, &.viz-active {
      fill: $hover;
      stroke: rgba($hover, 1.0);
      stroke-opacity: alpha($hover);
    }
  }

  &.viz-active {
    .viz-pie-arc {
      fill: $hover;
      stroke: $hover;
      stroke-opacity: alpha($hover);
    }
  }
}

@mixin viz-scatter-color($color, $hover, $opacity: 1.0) {
  .viz-scatter-point, &.viz-scatter-point {
    stroke: $color;
    stroke-opacity: $opacity;

    fill: rgba($color, $opacity);

    &.viz-active {
      stroke: darken($hover, 10%);
      stroke-opacity: 1;
    }

    &.viz-active, &.viz-opened {
      fill: $white;
    }

    &.viz-scatter-point-placeholder {
      stroke: $color;
      fill: $color;
      stroke-opacity: $opacity;

      &.viz-active {
        stroke: darken($hover, 10%);
        stroke-opacity: 1;
      }

      &.viz-opened, &.viz-active {
        fill: $white;
      }
    }
  }
}

@mixin viz-legend-color($color, $hover) {
  .viz-legend-point {
    transition: fill $viz-tranisition-time linear;
    fill: $color;

    &:hover, &.viz-active {
      fill: $hover;
    }
  }
}

@mixin viz-indicator-color($color, $hover) {
  &.viz-series-indicator {
    background: $color;
    transition: background $viz-tranisition-time linear;

    &.viz-active {
      background: $hover;
    }
  }
}

@mixin blurred-viz-colors($type, $palette: $blurred-viz-palette) {
  $limit: length($palette);
  $i: 0;

  @while $i < $limit {
    $color: get-palette-color($palette, $i);
    $hover: rgba($color, 1.0);

    .viz-color-#{$i} {
      @if $type == line {
        @include viz-line-color($color, $hover, $opacity: $viz-blurred-opacity);
        @include viz-scatter-color($color, $hover, $opacity: $viz-blurred-opacity);
      } @else if $type == area {
        @include viz-area-color($color, $hover);
        @include viz-scatter-color($color, $hover, $opacity: $viz-blurred-opacity);
      } @else if $type == bar {
        @include viz-bar-color($color, $hover);
      } @else if $type == pie {
        @include viz-pie-color($color, $hover);
      } @else if $type == legend {
        @include viz-legend-color($color, $hover);
      } @else if $type == indicators {
        @include viz-indicator-color($color, $hover);
      }
    }

    $i: $i + 1;
  }
}

@mixin viz-colors($type, $palette: $viz-palette) {
  $limit: length($palette);
  $i: 0;

  @while $i < $limit {
    $color: get-palette-color($palette, $i);

    // NOTE: We desaturate all the other colors on a hover, so we want to keep
    // the hovered color the same.
    $hover: $color;

    .viz-color-#{$i} {
      @if $type == line {
        @include viz-line-color($color, $hover);
        @include viz-scatter-color($color, $hover);
      } @else if $type == area {
        @include viz-line-color($color, $hover);
        @include viz-area-color($color, $hover);
        @include viz-scatter-color($color, $hover);
      } @else if $type == bar {
        @include viz-bar-color($color, $hover);
      } @else if $type == pie {
        @include viz-pie-color($color, $hover);
      } @else if $type == legend {
        @include viz-legend-color($color, $hover);
      } @else if $type == indicators {
        @include viz-indicator-color($color, $hover);
      }
    }

    $i: $i + 1;
  }
}

@mixin transform($transform) {
  -webkit-transform: $transform;
  -moz-transform: $transform;
  -ms-transform: $transform;
  transform: $transform;
}
